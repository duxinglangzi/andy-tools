
    静夜思
         李白
  床前明月光，
  疑是地上霜。
  举头望明月，
  低头思故乡。

1、commit --amend 命令学习：
  如果当某一次(git commit -m "git description") 提交之后，突然意识到可能注释写错了。
  那么，可以使用 git commit -amend -m "new git description" 来进行修正。同时，上一次提交的commitID也会消失在 git log 提交日志中，
  但是，如果你有幸记住了第一次的CommitId ，那么可以使用git show commitID 来查看上次的注释内容
  (注意事项) ： 这里需要注意的是，如果上一次的commitID 被推送至远程仓库(git push)后 ，那么这次commitID 注释内容将无法进行再次修改

2、git blame [filename] -L 开始行号,结束行号
  其中 -L 一定要大写。

6、git cherry-pink [commitID]  是用来将同一个仓库内不同分支提交的内容切换到当前分支上来。

9、在使用 git push --delete origin origin/xxxxx-fixbug 命令时，发生以下保存，那么很可能是你因为你从来没有在本地使用过当前分支
error: unable to delete 'origin/wuqiong-fixbug': remote ref does not exist
error: failed to push some refs to 'git@code.liuluxiao.com:new-continent/columbus-parent.git'

解决办法： git checkout xxxxx-fixbug 切换到当前分支上， 然后再 进行 git push --delete origin origin/xxxxx-fixbug
此时将不会再发生错误 。

5、git push --set-upstream origin XXXXXXX
此命令是将 本地分支推送至远程， 首次使用，再次提交时即可使用  git push 命令

6、git tag 的使用
git tag 列出所有的标签
git tag [tagname] 创建一个标签
git push origin [tagname] 推送一个tag 到远程仓库去
git show [tagname] 查看标签所有改动信息
git tag --list | git tag --delete 删除分支


git tag -l jenkins-columbus-parent-master-71
git tag -a -f -m Jenkins Git plugin tagging with jenkins-columbus-parent-master-71 jenkins-columbus-parent-master-71
git --version
git push git@172.17.200.96:new-continent/columbus-parent.git jenkins-columbus-parent-master-71


7、git branch 分支操作等等
git branch 查看当前分支
git branch -a 查看所有分支，包含远程分支
git branch -d [branchName] 删除一个本地分支，如果当前本地分支没有进行 合并过 master。 那么会有提示。 
git branch -D [branchName] 如上，如果本地分支没有merge过。那么可以使用此命令进行 强制删除
git push --delete origin [branchName] 删除远程仓库的分支，但是进行此操作前，必须切换到当前分支，
然后才能删除远程分支，下一步在删除本地分支。也就是说删除的远程分支，必须存在于本地。

git branch [branchName] 创建新分支 
git branch -f master 22a0ae7m4k2n5m2n2    将master分支 强制指向某一次提交记录。注释:(比如在创建新的分支内修改了好多东西，并且想让当前分支当master 主干分支。既可以采用此命令。)


8、 git reset 回滚操作
git reset fh1h31j3j5nw5mw 回滚到某一次提交， 如果当前commitID和目标commitID 相差的版本比较多，不建议使用此命令
另外，reset 回滚到目标commitID 会丢失数据


9、git revert 同样回滚操作
git revert fh1h31j3j5nw5mw 回滚到某一次提交，该命令指示将本地代码恢复到某一次版本的状态。 并且产生一个新的commitID 来记录，
原有的提交并不会消失，只是被 目标版本 覆盖而已。

10、git log 使用
git log 查看提交记录
git log --pretty=oneline 按行展示提交记录
git log --graph 展示提交树

多个操作符可组合使用，比如: git log --graph --oneline 展示提交树 并按行显示
比如查看两个或者多个标签之间的提交记录: git log --oneline version-master-115...version-master-116
当然也可以是多个 提交记录之间的内容. 


log --color --graph --pretty=format:'%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative











